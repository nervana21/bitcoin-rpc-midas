//! This file is auto-generated. Do not edit manually.
//! Generated for Bitcoin Core version: latest

/// Return information about the given bitcoin address.
/// Some of the information will only be present if the address is in the active wallet.

/// # Example
/// ```rust
/// use bitcoin_rpc_codegen::client::latest::getaddressinfo;
///
/// let client = Client::new("http://127.0.0.1:8332", auth);
/// let result = client.getaddressinfo(/* params */).await?;
/// ```

use serde::{Deserialize, Serialize};
use serde_json::{Value, json};
use transport::{Transport, TransportError};
/// Response for the `getaddressinfo` RPC call.
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct GetaddressinfoResponse {
    /// The bitcoin address validated.
    pub address: String,
    /// The hex-encoded output script generated by the address.
    pub script_pub_key: bitcoin::ScriptBuf,
    /// If the address is yours.
    pub ismine: bool,
    /// If the address is watchonly.
    pub iswatchonly: bool,
    /// If we know how to spend coins sent to this address, ignoring the possible lack of private keys.
    pub solvable: bool,
    /// A descriptor for spending coins sent to this address (only when solvable).
    #[serde(skip_serializing_if = "Option::is_none")]
    pub desc: Option<String>,
    /// The descriptor used to derive this address if this is a descriptor wallet
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parent_desc: Option<String>,
    /// If the key is a script.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub isscript: Option<bool>,
    /// If the address was used for change output.
    pub ischange: bool,
    /// If the address is a witness address.
    pub iswitness: bool,
    /// The version number of the witness program.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub witness_version: Option<u64>,
    /// The hex value of the witness program.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub witness_program: Option<String>,
    /// The output script type. Only if isscript is true and the redeemscript is known. Possible
    /// types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash,
    /// witness_v0_scripthash, witness_unknown.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub script: Option<String>,
    /// The redeemscript for the p2sh address.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub hex: Option<String>,
    /// Array of pubkeys associated with the known redeemscript (only if script is multisig).
    #[serde(skip_serializing_if = "Option::is_none")]
    pub pubkeys: Option<Vec<serde_json::Value>>,
    /// The number of signatures required to spend multisig output (only if script is multisig).
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sigsrequired: Option<u64>,
    /// The hex value of the raw public key for single-key addresses (possibly embedded in P2SH or P2WSH).
    #[serde(skip_serializing_if = "Option::is_none")]
    pub pubkey: Option<bitcoin::PublicKey>,
    /// Information about the address embedded in P2SH or P2WSH, if relevant and known.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub embedded: Option<serde_json::Value>,
    /// If the pubkey is compressed.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub iscompressed: Option<bool>,
    /// The creation time of the key, if available, expressed in UNIX epoch time.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<serde_json::Value>,
    /// The HD keypath, if the key is HD and available.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub hdkeypath: Option<String>,
    /// The Hash160 of the HD seed.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub hdseedid: Option<String>,
    /// The fingerprint of the master key.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub hdmasterfingerprint: Option<String>,
    /// Array of labels associated with the address. Currently limited to one label but returned
    /// as an array to keep the API stable if multiple labels are enabled in the future.
    pub labels: Vec<serde_json::Value>,
}



/// Calls the `getaddressinfo` RPC method.
///
/// Generated transport wrapper for JSON-RPC.
pub async fn getaddressinfo(transport: &dyn Transport, address: serde_json::Value) -> Result<GetaddressinfoResponse, TransportError> {
    let params = vec![json!(address)];
    let raw = transport.send_request("getaddressinfo", &params).await?;
    Ok(serde_json::from_value::<GetaddressinfoResponse>(raw)?)
}
