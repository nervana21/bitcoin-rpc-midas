//! This file is auto-generated. Do not edit manually.
//! Generated for Bitcoin Core version: latest

/// Return information about the given bitcoin address.

/// # Example
/// ```rust
/// use bitcoin_rpc_codegen::client::latest::validateaddress;
///
/// let client = Client::new("http://127.0.0.1:8332", auth);
/// let result = client.validateaddress(/* params */).await?;
/// ```

use serde::{Deserialize, Serialize};
use serde_json::{Value, json};
use transport::{Transport, TransportError};
/// Response for the `validateaddress` RPC call.
#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct ValidateaddressResponse {
    /// If the address is valid or not
    pub isvalid: bool,
    /// The bitcoin address validated
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// The hex-encoded output script generated by the address
    #[serde(skip_serializing_if = "Option::is_none")]
    pub script_pub_key: Option<bitcoin::ScriptBuf>,
    /// If the key is a script
    #[serde(skip_serializing_if = "Option::is_none")]
    pub isscript: Option<bool>,
    /// If the address is a witness address
    #[serde(skip_serializing_if = "Option::is_none")]
    pub iswitness: Option<bool>,
    /// The version number of the witness program
    #[serde(skip_serializing_if = "Option::is_none")]
    pub witness_version: Option<u64>,
    /// The hex value of the witness program
    #[serde(skip_serializing_if = "Option::is_none")]
    pub witness_program: Option<String>,
    /// Error message, if any
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    /// Indices of likely error locations in address, if known (e.g. Bech32 errors)
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error_locations: Option<Vec<String>>,
}



/// Calls the `validateaddress` RPC method.
///
/// Generated transport wrapper for JSON-RPC.
pub async fn validateaddress(transport: &dyn Transport, address: serde_json::Value) -> Result<ValidateaddressResponse, TransportError> {
    let params = vec![json!(address)];
    let raw = transport.send_request("validateaddress", &params).await?;
    Ok(serde_json::from_value::<ValidateaddressResponse>(raw)?)
}
